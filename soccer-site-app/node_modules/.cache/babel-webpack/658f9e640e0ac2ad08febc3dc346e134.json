{"ast":null,"code":"/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\nimport { Directive, ElementRef, Inject, PLATFORM_ID, Injectable, Input, NgModule, IterableDiffers, KeyValueDiffers, Optional, Renderer2, Self, SecurityContext, ɵɵdefineInjectable } from '@angular/core';\nimport { isPlatformServer, NgClass, NgStyle } from '@angular/common';\nimport { MediaMarshaller, BaseDirective2, SERVER_TOKEN, StyleBuilder, StyleUtils, LAYOUT_CONFIG, CoreModule } from '@angular/flex-layout/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { takeUntil } from 'rxjs/operators';\nimport { DomSanitizer } from '@angular/platform-browser';\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: extended/img-src/img-src.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/flex-layout/core';\nimport * as ɵngcc2 from '@angular/common';\nimport * as ɵngcc3 from '@angular/platform-browser';\nlet ImgSrcStyleBuilder = /*#__PURE__*/(() => {\n  class ImgSrcStyleBuilder extends StyleBuilder {\n    /**\r\n     * @param {?} url\r\n     * @return {?}\r\n     */\n    buildStyles(url) {\n      return {\n        'content': url ? `url(${url})` : ''\n      };\n    }\n\n  }\n\n  ImgSrcStyleBuilder.ɵfac = function ImgSrcStyleBuilder_Factory(t) {\n    return ɵImgSrcStyleBuilder_BaseFactory(t || ImgSrcStyleBuilder);\n  };\n  /** @nocollapse */\n\n\n  ImgSrcStyleBuilder.ɵprov = ɵɵdefineInjectable({\n    factory: function ImgSrcStyleBuilder_Factory() {\n      return new ImgSrcStyleBuilder();\n    },\n    token: ImgSrcStyleBuilder,\n    providedIn: \"root\"\n  });\n  return ImgSrcStyleBuilder;\n})();\nconst ɵImgSrcStyleBuilder_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(ImgSrcStyleBuilder);\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ImgSrcDirective = /*#__PURE__*/(() => {\n  class ImgSrcDirective extends BaseDirective2 {\n    /**\r\n     * @param {?} elementRef\r\n     * @param {?} styleBuilder\r\n     * @param {?} styler\r\n     * @param {?} marshal\r\n     * @param {?} platformId\r\n     * @param {?} serverModuleLoaded\r\n     */\n    constructor(elementRef, styleBuilder, styler, marshal, platformId, serverModuleLoaded) {\n      super(elementRef, styleBuilder, styler, marshal);\n      this.platformId = platformId;\n      this.serverModuleLoaded = serverModuleLoaded;\n      this.DIRECTIVE_KEY = 'img-src';\n      this.defaultSrc = '';\n      this.styleCache = imgSrcCache;\n      this.init();\n      this.setValue(this.nativeElement.getAttribute('src') || '', '');\n\n      if (isPlatformServer(this.platformId) && this.serverModuleLoaded) {\n        this.nativeElement.setAttribute('src', '');\n      }\n    }\n    /**\r\n     * @param {?} val\r\n     * @return {?}\r\n     */\n\n\n    set src(val) {\n      this.defaultSrc = val;\n      this.setValue(this.defaultSrc, '');\n    }\n    /**\r\n     * Use the [responsively] activated input value to update\r\n     * the host img src attribute or assign a default `img.src=''`\r\n     * if the src has not been defined.\r\n     *\r\n     * Do nothing to standard `<img src=\"\">` usages, only when responsive\r\n     * keys are present do we actually call `setAttribute()`\r\n     * @protected\r\n     * @param {?=} value\r\n     * @return {?}\r\n     */\n\n\n    updateWithValue(value) {\n      /** @type {?} */\n      const url = value || this.defaultSrc;\n\n      if (isPlatformServer(this.platformId) && this.serverModuleLoaded) {\n        this.addStyles(url);\n      } else {\n        this.nativeElement.setAttribute('src', url);\n      }\n    }\n\n  }\n\n  ImgSrcDirective.ɵfac = function ImgSrcDirective_Factory(t) {\n    return new (t || ImgSrcDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ImgSrcStyleBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.StyleUtils), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.MediaMarshaller), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(SERVER_TOKEN));\n  };\n\n  ImgSrcDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: ImgSrcDirective,\n    inputs: {\n      src: \"src\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  /** @nocollapse */\n\n  return ImgSrcDirective;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** @type {?} */\n\n\nconst imgSrcCache = /*#__PURE__*/new Map();\n/** @type {?} */\n\nconst inputs = ['src.xs', 'src.sm', 'src.md', 'src.lg', 'src.xl', 'src.lt-sm', 'src.lt-md', 'src.lt-lg', 'src.lt-xl', 'src.gt-xs', 'src.gt-sm', 'src.gt-md', 'src.gt-lg'];\n/** @type {?} */\n\nconst selector = `\n  img[src.xs],    img[src.sm],    img[src.md],    img[src.lg],   img[src.xl],\n  img[src.lt-sm], img[src.lt-md], img[src.lt-lg], img[src.lt-xl],\n  img[src.gt-xs], img[src.gt-sm], img[src.gt-md], img[src.gt-lg]\n`;\n/**\r\n * This directive provides a responsive API for the HTML <img> 'src' attribute\r\n * and will update the img.src property upon each responsive activation.\r\n *\r\n * e.g.\r\n *      <img src=\"defaultScene.jpg\" src.xs=\"mobileScene.jpg\"></img>\r\n *\r\n * @see https://css-tricks.com/responsive-images-youre-just-changing-resolutions-use-src/\r\n */\n\nlet DefaultImgSrcDirective = /*#__PURE__*/(() => {\n  class DefaultImgSrcDirective extends ImgSrcDirective {\n    constructor() {\n      super(...arguments);\n      this.inputs = inputs;\n    }\n\n  }\n\n  DefaultImgSrcDirective.ɵfac = function DefaultImgSrcDirective_Factory(t) {\n    return ɵDefaultImgSrcDirective_BaseFactory(t || DefaultImgSrcDirective);\n  };\n\n  DefaultImgSrcDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: DefaultImgSrcDirective,\n    selectors: [[\"img\", \"src.xs\", \"\"], [\"img\", \"src.sm\", \"\"], [\"img\", \"src.md\", \"\"], [\"img\", \"src.lg\", \"\"], [\"img\", \"src.xl\", \"\"], [\"img\", \"src.lt-sm\", \"\"], [\"img\", \"src.lt-md\", \"\"], [\"img\", \"src.lt-lg\", \"\"], [\"img\", \"src.lt-xl\", \"\"], [\"img\", \"src.gt-xs\", \"\"], [\"img\", \"src.gt-sm\", \"\"], [\"img\", \"src.gt-md\", \"\"], [\"img\", \"src.gt-lg\", \"\"]],\n    inputs: {\n      \"src.xs\": \"src.xs\",\n      \"src.sm\": \"src.sm\",\n      \"src.md\": \"src.md\",\n      \"src.lg\": \"src.lg\",\n      \"src.xl\": \"src.xl\",\n      \"src.lt-sm\": \"src.lt-sm\",\n      \"src.lt-md\": \"src.lt-md\",\n      \"src.lt-lg\": \"src.lt-lg\",\n      \"src.lt-xl\": \"src.lt-xl\",\n      \"src.gt-xs\": \"src.gt-xs\",\n      \"src.gt-sm\": \"src.gt-sm\",\n      \"src.gt-md\": \"src.gt-md\",\n      \"src.gt-lg\": \"src.gt-lg\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return DefaultImgSrcDirective;\n})();\nconst ɵDefaultImgSrcDirective_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(DefaultImgSrcDirective);\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: extended/class/class.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n\nlet ClassDirective = /*#__PURE__*/(() => {\n  class ClassDirective extends BaseDirective2 {\n    /**\r\n     * @param {?} elementRef\r\n     * @param {?} styler\r\n     * @param {?} marshal\r\n     * @param {?} iterableDiffers\r\n     * @param {?} keyValueDiffers\r\n     * @param {?} renderer2\r\n     * @param {?} ngClassInstance\r\n     */\n    constructor(elementRef, styler, marshal, iterableDiffers, keyValueDiffers, renderer2, ngClassInstance) {\n      super(elementRef, null, styler, marshal);\n      this.ngClassInstance = ngClassInstance;\n      this.DIRECTIVE_KEY = 'ngClass';\n\n      if (!this.ngClassInstance) {\n        // Create an instance NgClass Directive instance only if `ngClass=\"\"` has NOT been defined on\n        // the same host element; since the responsive variations may be defined...\n        this.ngClassInstance = new NgClass(iterableDiffers, keyValueDiffers, elementRef, renderer2);\n      }\n\n      this.init();\n      this.setValue('', '');\n    }\n    /**\r\n     * Capture class assignments so we cache the default classes\r\n     * which are merged with activated styles and used as fallbacks.\r\n     * @param {?} val\r\n     * @return {?}\r\n     */\n\n\n    set klass(val) {\n      this.ngClassInstance.klass = val;\n      this.setValue(val, '');\n    }\n    /**\r\n     * @protected\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\n\n\n    updateWithValue(value) {\n      this.ngClassInstance.ngClass = value;\n      this.ngClassInstance.ngDoCheck();\n    } // ******************************************************************\n    // Lifecycle Hooks\n    // ******************************************************************\n\n    /**\r\n     * For ChangeDetectionStrategy.onPush and ngOnChanges() updates\r\n     * @return {?}\r\n     */\n\n\n    ngDoCheck() {\n      this.ngClassInstance.ngDoCheck();\n    }\n\n  }\n\n  ClassDirective.ɵfac = function ClassDirective_Factory(t) {\n    return new (t || ClassDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.StyleUtils), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.MediaMarshaller), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.KeyValueDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgClass, 10));\n  };\n\n  ClassDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: ClassDirective,\n    inputs: {\n      klass: [\"class\", \"klass\"]\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  /** @nocollapse */\n\n  return ClassDirective;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** @type {?} */\n\n\nconst inputs$1 = ['ngClass', 'ngClass.xs', 'ngClass.sm', 'ngClass.md', 'ngClass.lg', 'ngClass.xl', 'ngClass.lt-sm', 'ngClass.lt-md', 'ngClass.lt-lg', 'ngClass.lt-xl', 'ngClass.gt-xs', 'ngClass.gt-sm', 'ngClass.gt-md', 'ngClass.gt-lg'];\n/** @type {?} */\n\nconst selector$1 = `\n  [ngClass], [ngClass.xs], [ngClass.sm], [ngClass.md], [ngClass.lg], [ngClass.xl],\n  [ngClass.lt-sm], [ngClass.lt-md], [ngClass.lt-lg], [ngClass.lt-xl],\n  [ngClass.gt-xs], [ngClass.gt-sm], [ngClass.gt-md], [ngClass.gt-lg]\n`;\n/**\r\n * Directive to add responsive support for ngClass.\r\n * This maintains the core functionality of 'ngClass' and adds responsive API\r\n * Note: this class is a no-op when rendered on the server\r\n */\n\nlet DefaultClassDirective = /*#__PURE__*/(() => {\n  class DefaultClassDirective extends ClassDirective {\n    constructor() {\n      super(...arguments);\n      this.inputs = inputs$1;\n    }\n\n  }\n\n  DefaultClassDirective.ɵfac = function DefaultClassDirective_Factory(t) {\n    return ɵDefaultClassDirective_BaseFactory(t || DefaultClassDirective);\n  };\n\n  DefaultClassDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: DefaultClassDirective,\n    selectors: [[\"\", \"ngClass\", \"\"], [\"\", \"ngClass.xs\", \"\"], [\"\", \"ngClass.sm\", \"\"], [\"\", \"ngClass.md\", \"\"], [\"\", \"ngClass.lg\", \"\"], [\"\", \"ngClass.xl\", \"\"], [\"\", \"ngClass.lt-sm\", \"\"], [\"\", \"ngClass.lt-md\", \"\"], [\"\", \"ngClass.lt-lg\", \"\"], [\"\", \"ngClass.lt-xl\", \"\"], [\"\", \"ngClass.gt-xs\", \"\"], [\"\", \"ngClass.gt-sm\", \"\"], [\"\", \"ngClass.gt-md\", \"\"], [\"\", \"ngClass.gt-lg\", \"\"]],\n    inputs: {\n      ngClass: \"ngClass\",\n      \"ngClass.xs\": \"ngClass.xs\",\n      \"ngClass.sm\": \"ngClass.sm\",\n      \"ngClass.md\": \"ngClass.md\",\n      \"ngClass.lg\": \"ngClass.lg\",\n      \"ngClass.xl\": \"ngClass.xl\",\n      \"ngClass.lt-sm\": \"ngClass.lt-sm\",\n      \"ngClass.lt-md\": \"ngClass.lt-md\",\n      \"ngClass.lt-lg\": \"ngClass.lt-lg\",\n      \"ngClass.lt-xl\": \"ngClass.lt-xl\",\n      \"ngClass.gt-xs\": \"ngClass.gt-xs\",\n      \"ngClass.gt-sm\": \"ngClass.gt-sm\",\n      \"ngClass.gt-md\": \"ngClass.gt-md\",\n      \"ngClass.gt-lg\": \"ngClass.gt-lg\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return DefaultClassDirective;\n})();\nconst ɵDefaultClassDirective_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(DefaultClassDirective);\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: extended/show-hide/show-hide.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n\nlet ShowHideStyleBuilder = /*#__PURE__*/(() => {\n  class ShowHideStyleBuilder extends StyleBuilder {\n    /**\r\n     * @param {?} show\r\n     * @param {?} parent\r\n     * @return {?}\r\n     */\n    buildStyles(show, parent) {\n      /** @type {?} */\n      const shouldShow = show === 'true';\n      return {\n        'display': shouldShow ? parent.display || (parent.isServer ? 'initial' : '') : 'none'\n      };\n    }\n\n  }\n\n  ShowHideStyleBuilder.ɵfac = function ShowHideStyleBuilder_Factory(t) {\n    return ɵShowHideStyleBuilder_BaseFactory(t || ShowHideStyleBuilder);\n  };\n  /** @nocollapse */\n\n\n  ShowHideStyleBuilder.ɵprov = ɵɵdefineInjectable({\n    factory: function ShowHideStyleBuilder_Factory() {\n      return new ShowHideStyleBuilder();\n    },\n    token: ShowHideStyleBuilder,\n    providedIn: \"root\"\n  });\n  return ShowHideStyleBuilder;\n})();\nconst ɵShowHideStyleBuilder_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(ShowHideStyleBuilder);\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ShowHideDirective = /*#__PURE__*/(() => {\n  class ShowHideDirective extends BaseDirective2 {\n    /**\r\n     * @param {?} elementRef\r\n     * @param {?} styleBuilder\r\n     * @param {?} styler\r\n     * @param {?} marshal\r\n     * @param {?} layoutConfig\r\n     * @param {?} platformId\r\n     * @param {?} serverModuleLoaded\r\n     */\n    constructor(elementRef, styleBuilder, styler, marshal, layoutConfig, platformId, serverModuleLoaded) {\n      super(elementRef, styleBuilder, styler, marshal);\n      this.layoutConfig = layoutConfig;\n      this.platformId = platformId;\n      this.serverModuleLoaded = serverModuleLoaded;\n      this.DIRECTIVE_KEY = 'show-hide';\n      /**\r\n       * Original DOM Element CSS display style\r\n       */\n\n      this.display = '';\n      this.hasLayout = false;\n      this.hasFlexChild = false;\n    } // *********************************************\n    // Lifecycle Methods\n    // *********************************************\n\n    /**\r\n     * @return {?}\r\n     */\n\n\n    ngAfterViewInit() {\n      this.trackExtraTriggers();\n      /** @type {?} */\n\n      const children = Array.from(this.nativeElement.children);\n\n      for (let i = 0; i < children.length; i++) {\n        if (this.marshal.hasValue(children[i], 'flex')) {\n          this.hasFlexChild = true;\n          break;\n        }\n      }\n\n      if (DISPLAY_MAP.has(this.nativeElement)) {\n        this.display = DISPLAY_MAP.get(this.nativeElement);\n      } else {\n        this.display = this.getDisplayStyle();\n        DISPLAY_MAP.set(this.nativeElement, this.display);\n      }\n\n      this.init(); // set the default to show unless explicitly overridden\n\n      /** @type {?} */\n\n      const defaultValue = this.marshal.getValue(this.nativeElement, this.DIRECTIVE_KEY, '');\n\n      if (defaultValue === undefined || defaultValue === '') {\n        this.setValue(true, '');\n      } else {\n        this.triggerUpdate();\n      }\n    }\n    /**\r\n     * On changes to any \\@Input properties...\r\n     * Default to use the non-responsive Input value ('fxShow')\r\n     * Then conditionally override with the mq-activated Input's current value\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\n\n\n    ngOnChanges(changes) {\n      Object.keys(changes).forEach(\n      /**\r\n      * @param {?} key\r\n      * @return {?}\r\n      */\n      key => {\n        if (this.inputs.indexOf(key) !== -1) {\n          /** @type {?} */\n          const inputKey = key.split('.');\n          /** @type {?} */\n\n          const bp = inputKey.slice(1).join('.');\n          /** @type {?} */\n\n          const inputValue = changes[key].currentValue;\n          /** @type {?} */\n\n          let shouldShow = inputValue !== '' ? inputValue !== 0 ? coerceBooleanProperty(inputValue) : false : true;\n\n          if (inputKey[0] === 'fxHide') {\n            shouldShow = !shouldShow;\n          }\n\n          this.setValue(shouldShow, bp);\n        }\n      });\n    } // *********************************************\n    // Protected methods\n    // *********************************************\n\n    /**\r\n     *  Watch for these extra triggers to update fxShow, fxHide stylings\r\n     * @protected\r\n     * @return {?}\r\n     */\n\n\n    trackExtraTriggers() {\n      this.hasLayout = this.marshal.hasValue(this.nativeElement, 'layout');\n      ['layout', 'layout-align'].forEach(\n      /**\r\n      * @param {?} key\r\n      * @return {?}\r\n      */\n      key => {\n        this.marshal.trackValue(this.nativeElement, key).pipe(takeUntil(this.destroySubject)).subscribe(this.triggerUpdate.bind(this));\n      });\n    }\n    /**\r\n     * Override accessor to the current HTMLElement's `display` style\r\n     * Note: Show/Hide will not change the display to 'flex' but will set it to 'block'\r\n     * unless it was already explicitly specified inline or in a CSS stylesheet.\r\n     * @protected\r\n     * @return {?}\r\n     */\n\n\n    getDisplayStyle() {\n      return this.hasLayout || this.hasFlexChild && this.layoutConfig.addFlexToParent ? 'flex' : this.styler.lookupStyle(this.nativeElement, 'display', true);\n    }\n    /**\r\n     * Validate the visibility value and then update the host's inline display style\r\n     * @protected\r\n     * @param {?=} value\r\n     * @return {?}\r\n     */\n\n\n    updateWithValue(value = true) {\n      if (value === '') {\n        return;\n      }\n      /** @type {?} */\n\n\n      const isServer = isPlatformServer(this.platformId);\n      this.addStyles(value ? 'true' : 'false', {\n        display: this.display,\n        isServer\n      });\n\n      if (isServer && this.serverModuleLoaded) {\n        this.nativeElement.style.setProperty('display', '');\n      }\n\n      this.marshal.triggerUpdate(this.parentElement, 'layout-gap');\n    }\n\n  }\n\n  ShowHideDirective.ɵfac = function ShowHideDirective_Factory(t) {\n    return new (t || ShowHideDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ShowHideStyleBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.StyleUtils), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.MediaMarshaller), ɵngcc0.ɵɵdirectiveInject(LAYOUT_CONFIG), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(SERVER_TOKEN));\n  };\n\n  ShowHideDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: ShowHideDirective,\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  /** @nocollapse */\n\n  return ShowHideDirective;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** @type {?} */\n\n\nconst DISPLAY_MAP = /*#__PURE__*/new WeakMap();\n/** @type {?} */\n\nconst inputs$2 = ['fxShow', 'fxShow.print', 'fxShow.xs', 'fxShow.sm', 'fxShow.md', 'fxShow.lg', 'fxShow.xl', 'fxShow.lt-sm', 'fxShow.lt-md', 'fxShow.lt-lg', 'fxShow.lt-xl', 'fxShow.gt-xs', 'fxShow.gt-sm', 'fxShow.gt-md', 'fxShow.gt-lg', 'fxHide', 'fxHide.print', 'fxHide.xs', 'fxHide.sm', 'fxHide.md', 'fxHide.lg', 'fxHide.xl', 'fxHide.lt-sm', 'fxHide.lt-md', 'fxHide.lt-lg', 'fxHide.lt-xl', 'fxHide.gt-xs', 'fxHide.gt-sm', 'fxHide.gt-md', 'fxHide.gt-lg'];\n/** @type {?} */\n\nconst selector$2 = `\n  [fxShow], [fxShow.print],\n  [fxShow.xs], [fxShow.sm], [fxShow.md], [fxShow.lg], [fxShow.xl],\n  [fxShow.lt-sm], [fxShow.lt-md], [fxShow.lt-lg], [fxShow.lt-xl],\n  [fxShow.gt-xs], [fxShow.gt-sm], [fxShow.gt-md], [fxShow.gt-lg],\n  [fxHide], [fxHide.print],\n  [fxHide.xs], [fxHide.sm], [fxHide.md], [fxHide.lg], [fxHide.xl],\n  [fxHide.lt-sm], [fxHide.lt-md], [fxHide.lt-lg], [fxHide.lt-xl],\n  [fxHide.gt-xs], [fxHide.gt-sm], [fxHide.gt-md], [fxHide.gt-lg]\n`;\n/**\r\n * 'show' Layout API directive\r\n */\n\nlet DefaultShowHideDirective = /*#__PURE__*/(() => {\n  class DefaultShowHideDirective extends ShowHideDirective {\n    constructor() {\n      super(...arguments);\n      this.inputs = inputs$2;\n    }\n\n  }\n\n  DefaultShowHideDirective.ɵfac = function DefaultShowHideDirective_Factory(t) {\n    return ɵDefaultShowHideDirective_BaseFactory(t || DefaultShowHideDirective);\n  };\n\n  DefaultShowHideDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: DefaultShowHideDirective,\n    selectors: [[\"\", \"fxShow\", \"\"], [\"\", \"fxShow.print\", \"\"], [\"\", \"fxShow.xs\", \"\"], [\"\", \"fxShow.sm\", \"\"], [\"\", \"fxShow.md\", \"\"], [\"\", \"fxShow.lg\", \"\"], [\"\", \"fxShow.xl\", \"\"], [\"\", \"fxShow.lt-sm\", \"\"], [\"\", \"fxShow.lt-md\", \"\"], [\"\", \"fxShow.lt-lg\", \"\"], [\"\", \"fxShow.lt-xl\", \"\"], [\"\", \"fxShow.gt-xs\", \"\"], [\"\", \"fxShow.gt-sm\", \"\"], [\"\", \"fxShow.gt-md\", \"\"], [\"\", \"fxShow.gt-lg\", \"\"], [\"\", \"fxHide\", \"\"], [\"\", \"fxHide.print\", \"\"], [\"\", \"fxHide.xs\", \"\"], [\"\", \"fxHide.sm\", \"\"], [\"\", \"fxHide.md\", \"\"], [\"\", \"fxHide.lg\", \"\"], [\"\", \"fxHide.xl\", \"\"], [\"\", \"fxHide.lt-sm\", \"\"], [\"\", \"fxHide.lt-md\", \"\"], [\"\", \"fxHide.lt-lg\", \"\"], [\"\", \"fxHide.lt-xl\", \"\"], [\"\", \"fxHide.gt-xs\", \"\"], [\"\", \"fxHide.gt-sm\", \"\"], [\"\", \"fxHide.gt-md\", \"\"], [\"\", \"fxHide.gt-lg\", \"\"]],\n    inputs: {\n      fxShow: \"fxShow\",\n      \"fxShow.print\": \"fxShow.print\",\n      \"fxShow.xs\": \"fxShow.xs\",\n      \"fxShow.sm\": \"fxShow.sm\",\n      \"fxShow.md\": \"fxShow.md\",\n      \"fxShow.lg\": \"fxShow.lg\",\n      \"fxShow.xl\": \"fxShow.xl\",\n      \"fxShow.lt-sm\": \"fxShow.lt-sm\",\n      \"fxShow.lt-md\": \"fxShow.lt-md\",\n      \"fxShow.lt-lg\": \"fxShow.lt-lg\",\n      \"fxShow.lt-xl\": \"fxShow.lt-xl\",\n      \"fxShow.gt-xs\": \"fxShow.gt-xs\",\n      \"fxShow.gt-sm\": \"fxShow.gt-sm\",\n      \"fxShow.gt-md\": \"fxShow.gt-md\",\n      \"fxShow.gt-lg\": \"fxShow.gt-lg\",\n      fxHide: \"fxHide\",\n      \"fxHide.print\": \"fxHide.print\",\n      \"fxHide.xs\": \"fxHide.xs\",\n      \"fxHide.sm\": \"fxHide.sm\",\n      \"fxHide.md\": \"fxHide.md\",\n      \"fxHide.lg\": \"fxHide.lg\",\n      \"fxHide.xl\": \"fxHide.xl\",\n      \"fxHide.lt-sm\": \"fxHide.lt-sm\",\n      \"fxHide.lt-md\": \"fxHide.lt-md\",\n      \"fxHide.lt-lg\": \"fxHide.lt-lg\",\n      \"fxHide.lt-xl\": \"fxHide.lt-xl\",\n      \"fxHide.gt-xs\": \"fxHide.gt-xs\",\n      \"fxHide.gt-sm\": \"fxHide.gt-sm\",\n      \"fxHide.gt-md\": \"fxHide.gt-md\",\n      \"fxHide.gt-lg\": \"fxHide.gt-lg\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return DefaultShowHideDirective;\n})();\nconst ɵDefaultShowHideDirective_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(DefaultShowHideDirective);\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: extended/style/style-transforms.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * NgStyle allowed inputs\r\n */\n\n\nclass NgStyleKeyValue {\n  /**\r\n   * @param {?} key\r\n   * @param {?} value\r\n   * @param {?=} noQuotes\r\n   */\n  constructor(key, value, noQuotes = true) {\n    this.key = key;\n    this.value = value;\n    this.key = noQuotes ? key.replace(/['\"]/g, '').trim() : key.trim();\n    this.value = noQuotes ? value.replace(/['\"]/g, '').trim() : value.trim();\n    this.value = this.value.replace(/;/, '');\n  }\n\n}\n/**\r\n * @param {?} target\r\n * @return {?}\r\n */\n\n\nfunction getType(target) {\n  /** @type {?} */\n  let what = typeof target;\n\n  if (what === 'object') {\n    return target.constructor === Array ? 'array' : target.constructor === Set ? 'set' : 'object';\n  }\n\n  return what;\n}\n/**\r\n * Split string of key:value pairs into Array of k-v pairs\r\n * e.g.  'key:value; key:value; key:value;' -> ['key:value',...]\r\n * @param {?} source\r\n * @param {?=} delimiter\r\n * @return {?}\r\n */\n\n\nfunction buildRawList(source, delimiter = ';') {\n  return String(source).trim().split(delimiter).map(\n  /**\r\n  * @param {?} val\r\n  * @return {?}\r\n  */\n  val => val.trim()).filter(\n  /**\r\n  * @param {?} val\r\n  * @return {?}\r\n  */\n  val => val !== '');\n}\n/**\r\n * Convert array of key:value strings to a iterable map object\r\n * @param {?} styles\r\n * @param {?=} sanitize\r\n * @return {?}\r\n */\n\n\nfunction buildMapFromList(styles, sanitize) {\n  /** @type {?} */\n  const sanitizeValue =\n  /**\r\n  * @param {?} it\r\n  * @return {?}\r\n  */\n  it => {\n    if (sanitize) {\n      it.value = sanitize(it.value);\n    }\n\n    return it;\n  };\n\n  return styles.map(stringToKeyValue).filter(\n  /**\r\n  * @param {?} entry\r\n  * @return {?}\r\n  */\n  entry => !!entry).map(sanitizeValue).reduce(keyValuesToMap, {});\n}\n/**\r\n * Convert Set<string> or raw Object to an iterable NgStyleMap\r\n * @param {?} source\r\n * @param {?=} sanitize\r\n * @return {?}\r\n */\n\n\nfunction buildMapFromSet(source, sanitize) {\n  /** @type {?} */\n  let list = [];\n\n  if (getType(source) === 'set') {\n    source.forEach(\n    /**\r\n    * @param {?} entry\r\n    * @return {?}\r\n    */\n    entry => list.push(entry));\n  } else {\n    Object.keys(source).forEach(\n    /**\r\n    * @param {?} key\r\n    * @return {?}\r\n    */\n    key => {\n      list.push(`${key}:${source[key]}`);\n    });\n  }\n\n  return buildMapFromList(list, sanitize);\n}\n/**\r\n * Convert 'key:value' -> [key, value]\r\n * @param {?} it\r\n * @return {?}\r\n */\n\n\nfunction stringToKeyValue(it) {\n  const [key, ...vals] = it.split(':');\n  return new NgStyleKeyValue(key, vals.join(':'));\n}\n/**\r\n * Convert [ [key,value] ] -> { key : value }\r\n * @param {?} map\r\n * @param {?} entry\r\n * @return {?}\r\n */\n\n\nfunction keyValuesToMap(map, entry) {\n  if (!!entry.key) {\n    map[entry.key] = entry.value;\n  }\n\n  return map;\n}\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: extended/style/style.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n\nlet StyleDirective = /*#__PURE__*/(() => {\n  class StyleDirective extends BaseDirective2 {\n    /**\r\n     * @param {?} elementRef\r\n     * @param {?} styler\r\n     * @param {?} marshal\r\n     * @param {?} sanitizer\r\n     * @param {?} differs\r\n     * @param {?} renderer2\r\n     * @param {?} ngStyleInstance\r\n     * @param {?} serverLoaded\r\n     * @param {?} platformId\r\n     */\n    constructor(elementRef, styler, marshal, sanitizer, differs, renderer2, ngStyleInstance, serverLoaded, platformId) {\n      super(elementRef, null, styler, marshal);\n      this.sanitizer = sanitizer;\n      this.ngStyleInstance = ngStyleInstance;\n      this.DIRECTIVE_KEY = 'ngStyle';\n\n      if (!this.ngStyleInstance) {\n        // Create an instance NgStyle Directive instance only if `ngStyle=\"\"` has NOT been\n        // defined on the same host element; since the responsive variations may be defined...\n        this.ngStyleInstance = new NgStyle(elementRef, differs, renderer2);\n      }\n\n      this.init();\n      /** @type {?} */\n\n      const styles = this.nativeElement.getAttribute('style') || '';\n      this.fallbackStyles = this.buildStyleMap(styles);\n      this.isServer = serverLoaded && isPlatformServer(platformId);\n    }\n    /**\r\n     * Add generated styles\r\n     * @protected\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\n\n\n    updateWithValue(value) {\n      /** @type {?} */\n      const styles = this.buildStyleMap(value);\n      this.ngStyleInstance.ngStyle = Object.assign(Object.assign({}, this.fallbackStyles), styles);\n\n      if (this.isServer) {\n        this.applyStyleToElement(styles);\n      }\n\n      this.ngStyleInstance.ngDoCheck();\n    }\n    /**\r\n     * Remove generated styles\r\n     * @protected\r\n     * @return {?}\r\n     */\n\n\n    clearStyles() {\n      this.ngStyleInstance.ngStyle = this.fallbackStyles;\n      this.ngStyleInstance.ngDoCheck();\n    }\n    /**\r\n     * Convert raw strings to ngStyleMap; which is required by ngStyle\r\n     * NOTE: Raw string key-value pairs MUST be delimited by `;`\r\n     *       Comma-delimiters are not supported due to complexities of\r\n     *       possible style values such as `rgba(x,x,x,x)` and others\r\n     * @protected\r\n     * @param {?} styles\r\n     * @return {?}\r\n     */\n\n\n    buildStyleMap(styles) {\n      // Always safe-guard (aka sanitize) style property values\n\n      /** @type {?} */\n      const sanitizer =\n      /**\r\n      * @param {?} val\r\n      * @return {?}\r\n      */\n      val => this.sanitizer.sanitize(SecurityContext.STYLE, val) || '';\n\n      if (styles) {\n        switch (getType(styles)) {\n          case 'string':\n            return buildMapFromList$1(buildRawList(styles), sanitizer);\n\n          case 'array':\n            return buildMapFromList$1(styles, sanitizer);\n\n          case 'set':\n            return buildMapFromSet(styles, sanitizer);\n\n          default:\n            return buildMapFromSet(styles, sanitizer);\n        }\n      }\n\n      return {};\n    } // ******************************************************************\n    // Lifecycle Hooks\n    // ******************************************************************\n\n    /**\r\n     * For ChangeDetectionStrategy.onPush and ngOnChanges() updates\r\n     * @return {?}\r\n     */\n\n\n    ngDoCheck() {\n      this.ngStyleInstance.ngDoCheck();\n    }\n\n  }\n\n  StyleDirective.ɵfac = function StyleDirective_Factory(t) {\n    return new (t || StyleDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.StyleUtils), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.MediaMarshaller), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.DomSanitizer), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.KeyValueDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgStyle, 10), ɵngcc0.ɵɵdirectiveInject(SERVER_TOKEN), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n\n  StyleDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: StyleDirective,\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  /** @nocollapse */\n\n  return StyleDirective;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** @type {?} */\n\n\nconst inputs$3 = ['ngStyle', 'ngStyle.xs', 'ngStyle.sm', 'ngStyle.md', 'ngStyle.lg', 'ngStyle.xl', 'ngStyle.lt-sm', 'ngStyle.lt-md', 'ngStyle.lt-lg', 'ngStyle.lt-xl', 'ngStyle.gt-xs', 'ngStyle.gt-sm', 'ngStyle.gt-md', 'ngStyle.gt-lg'];\n/** @type {?} */\n\nconst selector$3 = `\n  [ngStyle],\n  [ngStyle.xs], [ngStyle.sm], [ngStyle.md], [ngStyle.lg], [ngStyle.xl],\n  [ngStyle.lt-sm], [ngStyle.lt-md], [ngStyle.lt-lg], [ngStyle.lt-xl],\n  [ngStyle.gt-xs], [ngStyle.gt-sm], [ngStyle.gt-md], [ngStyle.gt-lg]\n`;\n/**\r\n * Directive to add responsive support for ngStyle.\r\n *\r\n */\n\nlet DefaultStyleDirective = /*#__PURE__*/(() => {\n  class DefaultStyleDirective extends StyleDirective {\n    constructor() {\n      super(...arguments);\n      this.inputs = inputs$3;\n    }\n\n  }\n\n  DefaultStyleDirective.ɵfac = function DefaultStyleDirective_Factory(t) {\n    return ɵDefaultStyleDirective_BaseFactory(t || DefaultStyleDirective);\n  };\n\n  DefaultStyleDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: DefaultStyleDirective,\n    selectors: [[\"\", \"ngStyle\", \"\"], [\"\", \"ngStyle.xs\", \"\"], [\"\", \"ngStyle.sm\", \"\"], [\"\", \"ngStyle.md\", \"\"], [\"\", \"ngStyle.lg\", \"\"], [\"\", \"ngStyle.xl\", \"\"], [\"\", \"ngStyle.lt-sm\", \"\"], [\"\", \"ngStyle.lt-md\", \"\"], [\"\", \"ngStyle.lt-lg\", \"\"], [\"\", \"ngStyle.lt-xl\", \"\"], [\"\", \"ngStyle.gt-xs\", \"\"], [\"\", \"ngStyle.gt-sm\", \"\"], [\"\", \"ngStyle.gt-md\", \"\"], [\"\", \"ngStyle.gt-lg\", \"\"]],\n    inputs: {\n      ngStyle: \"ngStyle\",\n      \"ngStyle.xs\": \"ngStyle.xs\",\n      \"ngStyle.sm\": \"ngStyle.sm\",\n      \"ngStyle.md\": \"ngStyle.md\",\n      \"ngStyle.lg\": \"ngStyle.lg\",\n      \"ngStyle.xl\": \"ngStyle.xl\",\n      \"ngStyle.lt-sm\": \"ngStyle.lt-sm\",\n      \"ngStyle.lt-md\": \"ngStyle.lt-md\",\n      \"ngStyle.lt-lg\": \"ngStyle.lt-lg\",\n      \"ngStyle.lt-xl\": \"ngStyle.lt-xl\",\n      \"ngStyle.gt-xs\": \"ngStyle.gt-xs\",\n      \"ngStyle.gt-sm\": \"ngStyle.gt-sm\",\n      \"ngStyle.gt-md\": \"ngStyle.gt-md\",\n      \"ngStyle.gt-lg\": \"ngStyle.gt-lg\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return DefaultStyleDirective;\n})();\nconst ɵDefaultStyleDirective_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(DefaultStyleDirective);\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\r\n * Build a styles map from a list of styles, while sanitizing bad values first\r\n * @param {?} styles\r\n * @param {?=} sanitize\r\n * @return {?}\r\n */\n\n\nfunction buildMapFromList$1(styles, sanitize) {\n  /** @type {?} */\n  const sanitizeValue =\n  /**\r\n  * @param {?} it\r\n  * @return {?}\r\n  */\n  it => {\n    if (sanitize) {\n      it.value = sanitize(it.value);\n    }\n\n    return it;\n  };\n\n  return styles.map(stringToKeyValue).filter(\n  /**\r\n  * @param {?} entry\r\n  * @return {?}\r\n  */\n  entry => !!entry).map(sanitizeValue).reduce(keyValuesToMap, {});\n}\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: extended/module.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/** @type {?} */\n\n\nconst ALL_DIRECTIVES = [DefaultShowHideDirective, DefaultClassDirective, DefaultStyleDirective, DefaultImgSrcDirective];\n/**\r\n * *****************************************************************\r\n * Define module for the Extended API\r\n * *****************************************************************\r\n */\n\nlet ExtendedModule = /*#__PURE__*/(() => {\n  class ExtendedModule {}\n\n  ExtendedModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n    type: ExtendedModule\n  });\n  ExtendedModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n    factory: function ExtendedModule_Factory(t) {\n      return new (t || ExtendedModule)();\n    },\n    imports: [[CoreModule]]\n  });\n  return ExtendedModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ExtendedModule, {\n    declarations: function () {\n      return [DefaultShowHideDirective, DefaultClassDirective, DefaultStyleDirective, DefaultImgSrcDirective];\n    },\n    imports: function () {\n      return [CoreModule];\n    },\n    exports: function () {\n      return [DefaultShowHideDirective, DefaultClassDirective, DefaultStyleDirective, DefaultImgSrcDirective];\n    }\n  });\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: extended/public-api.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: extended/index.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n\nexport { ExtendedModule, ClassDirective, DefaultClassDirective, ImgSrcStyleBuilder, ImgSrcDirective, DefaultImgSrcDirective, ShowHideStyleBuilder, ShowHideDirective, DefaultShowHideDirective, StyleDirective, DefaultStyleDirective }; //# sourceMappingURL=extended.js.map","map":null,"metadata":{},"sourceType":"module"}